# -*- coding: utf-8 -*-
"""Proyek Pertama : Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lySK0LiE-PrTF27V_-ya_cgiGcwKwrGy

# Herliana Nur Ekawati
# M07

# Data Loading

Impor library yang akan digunakan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

"""Download dataset dari kaggle"""

!kaggle datasets download -d hariprabu/medical-insurance

"""Mengekstrak file zip"""

!mkdir insurance
!unzip -qq medical-insurance.zip -d insurance
!ls insurance

"""Membaca file csv"""

hospital = pd.read_csv('/content/insurance/med-insurance.csv')
hospital

"""# Deskripsi Variabel"""

hospital.info()

hospital.describe()

hospital.isnull().sum()

"""# Univariate Analysis

Sampel data dibagi menjadi 2 fitur, Numerical Features dan Categorical Features
"""

numerical_features = ['age', 'bmi', 'children', 'expenses']
categorical_features = ['sex', 'smoker', 'region']

"""Menampilkan Grafik Sex"""

feature = categorical_features[0]
count = hospital[feature].value_counts()
percent = 100*hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'Jumlah Sampel':count, 'Persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Menampilkan Grafik Smoker"""

feature = categorical_features[1]
count = hospital[feature].value_counts()
percent = 100*hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'Jumlah Sampel':count, 'Persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Menampilkan Grafik Region"""

feature = categorical_features[2]
count = hospital[feature].value_counts()
percent = 100*hospital[feature].value_counts(normalize=True)
df = pd.DataFrame({'Jumlah Sampel':count, 'Persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Menampilkan Grafik Numerical"""

hospital.hist(bins=50, figsize=(20,15))
plt.show()

"""# Multivariate Analysis

Categorical Features
"""

cat_features = hospital.select_dtypes(include = 'object').columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y='expenses', kind='bar', dodge=False, height = 4, aspect = 3, data=hospital, palette='Set3')
  plt.title("Rata-rata 'Expenses' Relatif terhadap - {}".format(col))

"""Numerical Features"""

sns.pairplot(hospital, diag_kind = 'kde')

"""Korelasi Matriks untuk Fitur Numerik"""

plt.figure(figsize=(10,8))
correlation_matrix = hospital.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Korelasi Matriks untuk Fitur Numerik", size=20)

"""# Data Preparation"""

from sklearn.preprocessing import OneHotEncoder
hospital = pd.concat([hospital, pd.get_dummies(hospital['sex'], prefix='sex')], axis=1)
hospital = pd.concat([hospital, pd.get_dummies(hospital['smoker'], prefix='smoker')], axis=1)
hospital = pd.concat([hospital, pd.get_dummies(hospital['region'], prefix='region')], axis=1)

"""Korelasi Matriks untuk Seluruh Fitur"""

plt.figure(figsize=(10, 8))
corr = hospital.corr().round(2)
sns.heatmap(data=corr, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Korelasi Matriks untuk Seluruh Fitur", size=20)

hospital.drop(['sex', 'smoker', 'region'], axis=1, inplace=True)
hospital

x = hospital.drop(['expenses'], axis=1)
x

"""Hapus kolom region karena tidak dibutuhkan"""

x_test = x.drop(['region_northeast', 'region_northwest', 'region_southeast', 'region_southwest'], axis=1)
x_test

"""Pisahkan fitur expenses menjadi y"""

y = hospital['expenses']
y

"""Train-Test-Split"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=200)

"""Mengecek jumlah sampel pada masing-masing bagian"""

print(f'Total # of sample in whole dataset: {len(x)}')
print(f'Total # of sample in train dataset: {len(x_train)}')
print(f'Total # of sample in test dataset: {len(x_test)}')

"""Standarisasi"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['age', 'bmi', 'children']
scaler = StandardScaler()
scaler.fit(x_train[numerical_features])
x_train[numerical_features] = scaler.transform(x_train.loc[:, numerical_features])
x_train[numerical_features].head()

"""Mengecek nilai mean dan standar deviasi pada setelah proses standarisasi"""

x_train[numerical_features].describe().round(4)

"""# Model Development

Dataframe untuk analisis model
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""Melatih data KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(x_train, y_train)

models.loc['train_mse', 'knn'] = mean_squared_error(y_pred = knn.predict(x_train), y_true=y_train)

"""Model development dengan RF"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(x_train, y_train)

models.loc['train_mse', 'RandomForest'] = mean_squared_error(y_pred=RF.predict(x_train), y_true=y_train)

"""Model development dengan Boosting Algorithm"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(x_train, y_train)
models.loc['train_mse', 'Boosting'] = mean_squared_error(y_pred=boosting.predict(x_train), y_true=y_train)

"""# Evaluasi Model

Proses Scaling
"""

x_test.loc[:, numerical_features] = scaler.transform(x_test[numerical_features])

"""Evaluasi ketiga model dengan metrik MSE"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN', 'RF', 'Boosting'])

model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
  mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(x_train))/1e3
  mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(x_test))/1e3

mse

"""Plot metrik dengan bar chart"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Uji"""

prediksi = x_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
  pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""Menghitung nilai R2 Score"""

from sklearn.metrics import r2_score
knn_test_pred = knn.predict(x_test)
forest_test_pred = RF.predict(x_test)
boosting_test_pred = boosting.predict(x_test)

print("R2 score KNN : ", r2_score(y_test, knn_test_pred))
print("R2 score RF : ", r2_score(y_test, forest_test_pred))
print("R2 score Boosting : ", r2_score(y_test, knn_test_pred))